 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Passenger Model
model Passenger {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  password    String
  bookmarks   Bookmark[]
  searches    Search[]
  createdAt   DateTime   @default(now())
}

// Bookmark model for saved locations
model Bookmark {
  id          String   @id @default(uuid())
  passengerId String
  locationId  String
  passenger   Passenger @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  location    Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

// Search history model
model Search {
  id          String   @id @default(uuid())
  passengerId String
  query       String
  timestamp   DateTime @default(now())
  passenger   Passenger @relation(fields: [passengerId], references: [id], onDelete: Cascade)
}

model Bus {
  id                String      @id @default(uuid())
  busNumber         String      @unique
  status            String      @default("available") // Options: "available", "full"
  startLocationId   String
  destinationId     String
  startLocation     Location    @relation("StartLocation", fields: [startLocationId], references: [id])
  destination       Location    @relation("DestinationLocation", fields: [destinationId], references: [id])
  checkpoints       Checkpoint[]
}

model Checkpoint {
  id          String   @id @default(uuid())
  busId       String
  locationId  String
  order       Int // Order of checkpoint in route
  bus         Bus      @relation(fields: [busId], references: [id], onDelete: Cascade)
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([busId, order]) // Index for faster queries
}

model Location {
  id          String   @id @default(uuid())
  name        String   @unique
  latitude    Float
  longitude   Float
  checkpoints Checkpoint[]
  busesStart  Bus[]    @relation("StartLocation")
  busesEnd    Bus[]    @relation("DestinationLocation")
  roadUpdates RoadUpdate[]
  bookmarks   Bookmark[]
}

// Road Updates (Admin updates real-time road conditions)
model RoadUpdate {
  id        String   @id @default(uuid())
  message   String
  locationId String?
  location  Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// Admin Model (Can Manage Buses and Update Road Conditions)
model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
}
